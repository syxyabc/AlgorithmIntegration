<!-- An ANT build file for Orson Charts including JavaFX support -->

<!-- Written by David Gilbert. -->

<!-- Tested recently with Ant 1.8.2 -->

<!-- This script will create temporary directories ../build and -->
<!-- ../distribution, as working areas.  A ../javadoc directory will -->
<!-- be created for the Javadoc HTML pages. -->

<project name="orsoncharts" default="all" basedir="..">

    <!-- Initialisation. -->
    <target name="initialise" description="Initialise required settings.">
        <tstamp />
        <property name="orsoncharts.name" value="orsoncharts" />
        <property name="orsoncharts.version" value="1.6" />
        <property name="fxgraphics2d.name" value="fxgraphics2d" />
        <property name="fxgraphics2d.version" value="1.5" />
        <property name="fxgraphics2d.jar" value="${basedir}/lib/${fxgraphics2d.name}-${fxgraphics2d.version}.jar"/>
        <property name="jfreesvg.name" value="jfreesvg" />
        <property name="jfreesvg.version" value="3.2" />
        <property name="jfreesvg.jar" value="${basedir}/lib/${jfreesvg.name}-${jfreesvg.version}.jar"/>
        <property name="orsonpdf.name" value="orsonpdf" />
        <property name="orsonpdf.version" value="1.7" />
        <property name="orsonpdf.jar" value="${basedir}/lib/${orsonpdf.name}-${orsonpdf.version}.jar"/>
        <property name="builddir" value="${basedir}/build" />
        <property name="junit.jar" value="${basedir}/lib/junit-4.11.jar"/>
        <property name="hamcrest.jar" value="${basedir}/lib/hamcrest-core-1.3.jar"/>
        <property name="src.version" value="1.8"/>
        <property name="target.version" value="1.8"/>
        <path id="build.classpath">
            <fileset dir="${basedir}/lib/">
                <include name="${fxgraphics2d.name}-${fxgraphics2d.version}.jar"/>
                <include name="${jfreesvg.name}-${jfreesvg.version}.jar"/>
                <include name="${orsonpdf.name}-${orsonpdf.version}.jar"/>
            </fileset>
        </path>
        <path id="demo.build.classpath">
            <fileset dir="${basedir}/lib/">
                <include name="${orsoncharts.name}-${orsoncharts.version}.jar"/>
                <include name="${fxgraphics2d.name}-${fxgraphics2d.version}.jar"/>
                <include name="${jfreesvg.name}-${jfreesvg.version}.jar"/>
                <include name="${orsonpdf.name}-${orsonpdf.version}.jar"/>
            </fileset>
        </path>
    </target>

    <!-- Compile the Orson Charts classes -->
    <target name="compile" depends="initialise"
            description="Compile the Orson Charts source code including the JavaFX classes.">

        <!-- create a temp build directory -->
        <mkdir dir="${basedir}/build" />

        <!-- compile the source, not the demos because this is just for the jar -->
        <javac srcdir="${basedir}/src/main/java"
               excludes="com/orsoncharts/demo/**"
               destdir="${basedir}/build"
               debug="on"
               deprecation="false"
               source="${src.version}"
               target="${target.version}">
            <classpath refid="build.classpath" />
            <include name="**"/>
        </javac>

        <!-- copy across Font Awesome, properties files and CSS for JavaFX -->
        <copy file="${basedir}/src/main/resources/com/orsoncharts/graphics3d/swing/fontawesome-webfont.ttf" tofile="${basedir}/build/com/orsoncharts/graphics3d/swing/fontawesome-webfont.ttf" />
        <copy file="${basedir}/src/main/resources/com/orsoncharts/Resources.properties" tofile="${basedir}/build/com/orsoncharts/Resources.properties" />
        <copy file="${basedir}/src/main/resources/com/orsoncharts/Resources_de.properties" tofile="${basedir}/build/com/orsoncharts/Resources_de.properties" />
        <copy file="${basedir}/src/main/resources/com/orsoncharts/Resources_it.properties" tofile="${basedir}/build/com/orsoncharts/Resources_it.properties" />
        <copy file="${basedir}/src/main/resources/com/orsoncharts/fx/chart3d-viewer.css" tofile="${basedir}/build/com/orsoncharts/fx/chart3d-viewer.css" />
 
        <!-- make the jar -->
        <jar jarfile="${basedir}/lib/${orsoncharts.name}-${orsoncharts.version}.jar"
             basedir="${basedir}/build" >
            <manifest>
                <attribute name="Specification-Title" value="Orson Charts" />
                <attribute name="Specification-Version" value="${orsoncharts.version}" />
                <attribute name="Specification-Vendor" value="orsoncharts.com" />
                <attribute name="Implementation-Title" value="Orson Charts" />
                <attribute name="Implementation-Version" value="${orsoncharts.version}" />
                <attribute name="Implementation-Vendor" value="orsoncharts.com" />
            </manifest>
        </jar>

        <!-- delete the temp directory -->
        <delete dir="${basedir}/build" />

    </target>

    <!-- Compile the Orson Charts demo applications (Swing) -->
    <target name="compile-demo-swing" depends="compile"
            description="Compile the Orson Charts demo applications for Swing.">

        <!-- create a temp build directory -->
        <mkdir dir="${basedir}/build" />

        <!-- compile the source -->
        <javac srcdir="${basedir}/src/main/java/com/orsoncharts/demo"
               destdir="${basedir}/build"
               debug="on"
               deprecation="false"
               source="${src.version}"
               target="${target.version}">
            <classpath refid="demo.build.classpath" />
            <include name="**" />
            <exclude name="fx/**" />
        </javac>

        <!-- copy across about.html, images, and data files -->
        <copy file="${basedir}/src/main/resources/com/orsoncharts/demo/about.html" tofile="${basedir}/build/com/orsoncharts/demo/about.html" />
        <copy todir="${basedir}/build/com/orsoncharts/demo">
            <fileset dir="${basedir}/src/main/resources/com/orsoncharts/demo">
                <include name="*.html"/>
                <include name="*.jpg"/>
                <include name="*.txt"/>
            </fileset>
        </copy>

        <!-- make the jar -->
        <jar jarfile="${basedir}/${orsoncharts.name}-${orsoncharts.version}-swing-demo.jar"
             basedir="${basedir}/build" >
            <manifest>
                <attribute name="Main-Class" value="com.orsoncharts.demo.swing.OrsonChartsDemo" />
                <attribute name="Class-Path" value="lib/${orsoncharts.name}-${orsoncharts.version}.jar lib/${orsonpdf.name}-${orsonpdf.version}.jar lib/${jfreesvg.name}-${jfreesvg.version}.jar" />
                <attribute name="Specification-Title" value="Orson Charts Demo (Swing)" />
                <attribute name="Specification-Version" value="${orsoncharts.version}" />
                <attribute name="Specification-Vendor" value="Object Refinery Limited" />
                <attribute name="Implementation-Title" value="Orson Charts Demo (Swing)" />
                <attribute name="Implementation-Version" value="${orsoncharts.version}" />
                <attribute name="Implementation-Vendor" value="Object Refinery Limited" />
            </manifest>
        </jar>

        <!-- delete the temp directory -->
        <delete dir="${basedir}/build" />

    </target>


    <!-- Compile the Orson Charts JavaFX demo applications -->
    <target name="compile-demo-javafx" depends="compile"
            description="Compile the Orson Charts JavaFX demo applications.">

        <!-- create a temp build directory -->
        <mkdir dir="${basedir}/build" />

        <!-- compile the source -->
        <javac srcdir="${basedir}/src/main/java/com/orsoncharts/demo"
               destdir="${basedir}/build"
               debug="on"
               deprecation="false"
               source="${src.version}"
               target="${target.version}">
            <classpath refid="demo.build.classpath" />
            <include name="**" />
            <exclude name="swing/**" />
        </javac>

        <!-- copy across about.html, images, and data files -->
        <copy file="${basedir}/src/main/resources/com/orsoncharts/demo/about.html" tofile="${basedir}/build/com/orsoncharts/demo/about.html" />
        <copy todir="${basedir}/build/com/orsoncharts/demo">
            <fileset dir="${basedir}/src/main/resources/com/orsoncharts/demo">
                <include name="*.html"/>
                <include name="*.jpg"/>
                <include name="*.txt"/>
            </fileset>
        </copy>

        <!-- make the jar -->
        <jar jarfile="${basedir}/${orsoncharts.name}-${orsoncharts.version}-fx-demo.jar"
             basedir="${basedir}/build" >
            <manifest>
                <attribute name="Main-Class" value="com.orsoncharts.demo.fx.OrsonChartsFXDemo" />
                <attribute name="Class-Path" value="lib/${orsoncharts.name}-${orsoncharts.version}.jar lib/${fxgraphics2d.name}-${fxgraphics2d.version}.jar lib/${orsonpdf.name}-${orsonpdf.version}.jar lib/${jfreesvg.name}-${jfreesvg.version}.jar" />
                <attribute name="Specification-Title" value="Orson Charts Demo (JavaFX)" />
                <attribute name="Specification-Version" value="${orsoncharts.version}" />
                <attribute name="Specification-Vendor" value="Object Refinery Limited" />
                <attribute name="Implementation-Title" value="Orson Charts Demo (JavaFX)" />
                <attribute name="Implementation-Version" value="${orsoncharts.version}" />
                <attribute name="Implementation-Vendor" value="Object Refinery Limited" />
            </manifest>
        </jar>

        <!-- delete the temp directory -->
        <delete dir="${basedir}/build" />

    </target>


    <!-- Generate the OrsonCharts API HTML pages -->
    <target name="javadoc"
            description="Generate the Javadoc HTML pages."
            depends="initialise">
        <delete dir="${basedir}/javadoc" />
        <mkdir dir="${basedir}/javadoc" />
        <javadoc destdir="${basedir}/javadoc"
                 windowtitle="Orson Charts version ${orsoncharts.version}"
                 overview="${basedir}/src/main/java/overview.html"
                 use="yes"
                 linksource="yes"
                 splitindex="yes"
                 docfilessubdirs="true">
            <classpath refid="build.classpath" />
            <packageset dir="${basedir}/src/main/java" defaultexcludes="yes">
                <include name="**"/>
                <exclude name="com/orsoncharts/demo/**"/>
            </packageset>
        </javadoc>
    </target>


    <!-- Create zip file containing the API HTML pages. -->
    <target name="zip-javadocs"
            description="Create ZIP file containing Javadoc HTML pages."
            depends="javadoc">
        <!-- make the zip file -->
        <zip zipfile="${basedir}/${orsoncharts.name}-${orsoncharts.version}-javadocs.zip">
             <zipfileset dir="${basedir}/javadoc"
                         prefix="${orsoncharts.name}-${orsoncharts.version}-javadocs" />
        </zip>
    </target>

    <!-- Fill the 'distribution' directory. -->
    <target name="fill-distribution" depends="compile,compile-demo-swing,compile-demo-javafx">

        <!-- delete the temporary distribution directory, if there is one -->
        <delete dir="${basedir}/distribution" />

        <!-- make a temporary distribution directory -->
        <mkdir dir="${basedir}/distribution" />

        <!-- copy across README -->
        <copy file="${basedir}/README.md" tofile="${basedir}/distribution/README.md" />

        <!-- copy across runtime jar file and demo jar file -->
        <copy file="${basedir}/lib/${orsoncharts.name}-${orsoncharts.version}.jar" tofile="${basedir}/distribution/lib/${orsoncharts.name}-${orsoncharts.version}.jar" />
        <copy file="${basedir}/${orsoncharts.name}-${orsoncharts.version}-swing-demo.jar" tofile="${basedir}/distribution/${orsoncharts.name}-${orsoncharts.version}-swing-demo.jar" />
        <copy file="${basedir}/${orsoncharts.name}-${orsoncharts.version}-fx-demo.jar" tofile="${basedir}/distribution/${orsoncharts.name}-${orsoncharts.version}-fx-demo.jar" />

        <!-- copy across source files -->
        <copy todir="${basedir}/distribution/src">
            <fileset dir="${basedir}/src">
            </fileset>
        </copy>

        <!-- copy across JavaScript files -->
        <copy todir="${basedir}/distribution/js">
            <fileset dir="${basedir}/js">
            </fileset>
        </copy>

        <!-- copy across Javadoc files -->
        <copy todir="${basedir}/distribution/javadoc">
            <fileset dir="${basedir}/javadoc/">
            </fileset>
        </copy>

        <!-- copy across lib files -->
        <copy file="${fxgraphics2d.jar}" tofile="${basedir}/distribution/lib/${fxgraphics2d.name}-${fxgraphics2d.version}.jar" />
        <copy file="${orsonpdf.jar}" tofile="${basedir}/distribution/lib/${orsonpdf.name}-${orsonpdf.version}.jar" />
        <copy file="${jfreesvg.jar}" tofile="${basedir}/distribution/lib/${jfreesvg.name}-${jfreesvg.version}.jar" />
        <copy file="${junit.jar}" tofile="${basedir}/distribution/lib/junit-4.11.jar" />
        <copy file="${hamcrest.jar}" tofile="${basedir}/distribution/lib/hamcrest-core-1.3.jar" />

        <!-- copy across the SVG demo files -->
        <copy todir="${basedir}/distribution/svg">
            <fileset dir="${basedir}/svg">
            </fileset>
        </copy>

        <!-- copy across the Maven build files -->
        <copy file="${basedir}/pom.xml" tofile="${basedir}/distribution/pom.xml" />
        <copy todir="${basedir}/distribution/maven">
            <fileset dir="${basedir}/maven">
            </fileset>
        </copy>

        <!-- copy across ant build files -->
        <copy file="${basedir}/ant/build.xml" tofile="${basedir}/distribution/ant/build.xml" />
        <copy file="${basedir}/ant/build.xml" tofile="${basedir}/distribution/ant/buildfx.xml" />

        <!-- convert end-of-line characters in text files -->
        <fixcrlf srcdir="${basedir}/distribution/src"
                 eol="crlf" eof="remove"
                 excludes="**/*.jpg **/*.ttf" />
    </target>

    <!-- Make .zip distribution for Orson Charts -->
    <target name="zip" depends="fill-distribution">
        <zip zipfile="${basedir}/${orsoncharts.name}-${orsoncharts.version}.zip">
             <zipfileset dir="${basedir}/distribution"
                         prefix="${orsoncharts.name}-${orsoncharts.version}" />
        </zip>

    </target>

    <!-- COMPILE THE JUNIT TESTS. -->
    <target name="compile-tests"
            depends="compile"
            description="Compile the test code">

        <mkdir dir="${basedir}/build-tests"/>
        <javac srcdir="${basedir}/src/test/java"
               destdir="${basedir}/build-tests"
               source="1.8"
               target="1.8"
               debug="true"
               deprecation="false"
               optimize="false">
            <classpath>
                <path refid="build.classpath"/>
                <pathelement location="${junit.jar}"/>
                <pathelement location="${hamcrest.jar}"/>
                <pathelement location="${basedir}/lib/${orsoncharts.name}-${orsoncharts.version}.jar"/>
                <pathelement location="${basedir}/build-tests"/>
            </classpath>
        </javac>

    </target>


    <!-- RUN THE JUNIT TESTS. -->
    <target name="test"
            depends="compile-tests"
            description="Run the test cases">

        <mkdir dir="${basedir}/build-tests-reports"/>

        <junit printSummary="yes"
               haltonerror="false"
               haltonfailure="false"
               fork="false"
               dir=".">

            <sysproperty key="basedir" value="."/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="build.classpath"/>
                <pathelement location="${junit.jar}"/>
                <pathelement location="${hamcrest.jar}"/>
                <pathelement location="${basedir}/lib/${orsoncharts.name}-${orsoncharts.version}.jar"/>
                <pathelement location="${basedir}/build-tests"/>
            </classpath>
            <batchtest todir="${basedir}/build-tests-reports">
                <fileset dir="${basedir}/src/test/java">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- ALL -->
    <target name="all"
            depends="compile,zip-javadocs,zip"
            description="Compiles Orson Charts, builds the jar files, generates the Javadoc HTML pages and creates a zip file.">

        <!-- delete the temporary distribution directory -->
        <delete dir="${basedir}/distribution" />
    </target>

</project>
